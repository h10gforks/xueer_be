swagger: '2.0'

#################################INFO START##########################
info:
  description: |
    学而API

  version: 1.0.0
  title: Xueer api
#  termsOfService: http://swagger.io/terms/
  contact:
    email: 3480437308@qq.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
###############################INFO END#################################

host: xueer.muxixyz.com
basePath: /api/v1.0
schemes:
 - https
 - http
######################TAG START#######################################
tags:
- name: auth
  description: 学而鉴权

- name: category
  description: 课程分类相关操作

- name: comment
  description: 评论相关操作

- name: course
  description: 课程相关操作

- name: like
  description: 点赞相关操作

- name: memcached
  description: 缓存相关操作

- name: question
  description: 课程提问相关操作

- name: answer
  description: 回答的相关操作

- name: tip
  description: 运营文章相关操作

- name: user
  description: 用户相关操作

- name: tag
  description: tag相关操作

- name: search
  description: 搜索相关操作

- name: promotion
  description: 木犀推广相关API

- name: other
  description: 其他api操作


# - name: user
#   description: Operations about user
#   externalDocs:
#     description: Find out more about our store
#     url: http://swagger.io
##########################TAG END######################################

###########################AUTH START#################################
securityDefinitions:
  
  basic:
    type: basic
    # scope: all
    description: 学而中需要登录请求的api，采用basic auth的方式，即在请求头中添加Authorization字段，内容为base64.encode(“邮箱:muxi304”)

  token:
    type: apiKey
    description: 另一种鉴权的方式是token,用户先登录(采用basic auth)请求/api/v1.0/token/获取token,然后在请求头中添加Authorization字段，内容为base64.encode(“token:”)
    name: token
    in: header
########################AUTH END######################################


########################PATH START####################################
paths:
  /token/:
    get:
      tags:
      - auth
      summary: 获取用户token
      description: 采用basic auth方式登录获取token
      produces:
      - application/json
      responses:
        401:
          description: unathorized
        200:
          description: OK
          schema:
            properties:
              token:
                type: string
      security:
      - basic: []

  /main_category/:
    get:
      tags:
      - category
      summary: 获取主课程分类信息
      description: 1. 公共课 2. 通识课 3. 专业课 4. 素质课
      produces:
      - application/json
      responses:
        200:
          description: 返回所有的以课程主分类名为key,课程主分类在数据库中的id为value的对象的列表
    post:
      tags:
      - category
      summary: 创建一个课程主分类
      description: 以下的参数以json的形式传递,注意，该api需要运营以上权限才可以调用
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: 请求体中的课程主分类中的json对象
        required: true
        schema:
          type: object
          properties:
            id:
              type: string
            category_name:
              type: string
      responses:
        201:
          description: 操作成功，返回由当前新建的课程主分类名为key,id为value的字典
        500:
          description: 服务器内部错误
      security:
      - token: []
        # - all
  /main_category/{id}/:
    put:
      tags:
      - category
      summary: 更新课程主分类名称
      description: 需要运营以上权限方可调用该api
      parameters:
      - in: body
        name: category
        description: 请求体中的新的课程主分类名称对象
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              description: 新的课程主分类名称
      
      - in: path
        name: id
        required: true
        description: 所需要更改的课程主分类的id,通过路径参数传入
        
      responses:
        200:
          description: 更改成功.
        404:
          description: 根据传入的id没有找到对应的课程主分类
        500:
          description: 服务器错误
      security:  
      - token: []
        

  /sub_category/:
    get:
      tags:
      - category
      summary: 获取某一主分類下的二級分类信息
      description:  1. 通识核心课 2. 通识选修课
      parameters:
      - in: query
        name: main_category_id
        description: 主分类課程id
        required: true
      produces:
      - application/json
      responses:
        200:
          description: 返回查詢的主分類下的所有二級分類的名稱和id所組成的對象的列表
        404:
          description: 主分类不存在
    post:
      tags:
      - category
      summary: 在某一个主分类下面创建一个二级分类
      description: 以下的参数以json的形式传递,注意，该api需要运营以上权限才可以调用
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        # name: body
        description: 请求体中包含新二级分类的名称以及其所属的主分类的id的json对象
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            main_category_id:
              type: string
      responses:
        201:
          description: 操作成功，返回由当前新建的课程二级分类名为key,id为value的字典
        500:
          description: 服务器内部错误
      security:
      - token: []
  
  /sub_category/{id}/:
    put:
      tags:
      - category
      summary: 更新二级课程分类
      description: 该api需要运营以上权限才可以调用
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        required: true
        in: path
        description: 所要更新的二级分类的id
      - in: body
        # name: body
        description: 请求体中包含该二级分类的新名称以及其所要变更到的主分类的id的json对象
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            main_category_id:
              type: string
      responses:
        200:
          description: 操作成功
        404:
          description: 更具传入的id找不到二级课程分类对象
      security:
      - token: []


  /comments/:
    get:
      tags:
      - comment
      summary: 管理后台分页获取所有评论，默认每页10条
      description: 按照发表时间分页返回所有评论,运营以上权限才可以调用该api

      produces:
      - application/json
      parameters:
        - name: page
          required: true
          in: path
          description: 当前要获取的页面数,当不传此参数，则默认获取第一页
      responses:
        200:
          description: 返回评论对象数组
          headers:
            links:
              type: string
              description: 下一页和最后一页的请求地址
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
      security:
      - token: []

  /comments/{id}/:
    get:
      tags:
      - comment
      summary: 通过id获取某一条评论的信息
      description: 需登录
      produces:
      - application/json
      parameters:
        - name: id
          required: true
          in: path
          description: 所需要获取的评论的id
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: 通过id未找到该评论
      security:
      - token: []

    delete:
      tags:
      - comment
      summary: 通过id删除某条评论
      description: 管理员操作
      produces:
      - application/json
      parameters:
        - name: id
          required: true
          in: path
          description: 所需要删除的评论的id
      responses:
        404:
          description: 未找到评论，或者未找到评论所对应的课程
        200:
          description: 成功删除，并且更新了课程所对应的评论数
      security:
      - token: []


  /courses/{id}/comments/:
    get:
      tags:
      - comment
      summary: 分页获取某一课程的评论
      description:

      produces:
      - application/json
      parameters:
        - name: id
          required: true
          in: path
          description: 课程id
        - name: page
          required: true
          in: path
          description: 需要获取的页面，如果获取第一页则可以不用传该参数
      responses:
        404:
          description: 未找到课程
        200:
          description: OK
          headers:
            links:
              type: string
              description: 下一页和最后一页的请求地址
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
    post:
      tags:
      - comment
      summary: 对某一课程进行评论
      description: 登录之后操作,tag字段为给该课程添加的标签，为可选字段，若有多个tag,则每个tag用一个空格隔开,final_score,usual_score也都是可选字段
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: id
          required: true
          in: path
          description: 课程id
        - in: body
          # name: body
          description: 请求体中包含的评论json对象
          required: true
          schema:
            type: object
            properties:
              body:
                type: string
              tags:
                type: string
                description: 以一个空格分隔的多个标签
              final_score:
                type: integer
              usual_score:
                type: integer
      responses:
        201:
          description: 创建评论成功，返回新创建的评论的id
        404:
          description: 未找到该课程
      security:
      - token: []

  /courses/{id}/comments/hot/:
    get:
      tags:
      - comment
      summary: 获取某一课程的热门评论
      description: 按照点赞数从高到低排序，一次返回所有，点赞数>=3
      produces:
      - application/json
      parameters:
        - name: id
          required: true
          in: path
          description: 课程id
      responses:
        404:
          description: 未找到课程
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'

  /tip/{id}/comments/:
    get:
      tags:
      - comment
      summary: 分页获取运营文章的评论
      description: 按照评论发布的时间排序，新评论排在前面，默认每页10条
      produces:
      - application/json
      parameters:
        - name: id
          required: true
          in: path
          description: 运营文章id
        - name: page
          required: true
          in: path
          description: 需要获取的页面，如果获取第一页则可以不用传该参数
      responses:
        404:
          description: 未找到该运营文章
        200:
          description: OK
          headers:
            links:
              type: string
              description: 下一页和最后一页的请求地址
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
    post:
      tags:
      - comment
      summary: 对某一运营文章评论
      description: 登录操作
      produces:
      - application/json
      parameters:
        - name: id
          required: true
          in: path
          description: 运营文章id
        - in: body
          required: true
          # name:
          description: 包含评论内容的json对象
          schema:
            type: object
            properties:
              body:
                type: string
      responses:
        404:
          description: 未找到该运营文章
        201:
          description: OK,成功处理请求，并且更新了该运营文章的评论数，返回新创建的评论的id
      security:
      - token: []
  /tip/{tid}/comments/{id}/:
    delete:
      tags:
      - comment
      summary: 删除某一运营文章下的某一个评论
      description: 管理员操作
      produces:
      - application/json
      parameters:
        - name: tid
          required: true
          in: path
          description: 运营文章id
        - name: id
          required: true
          in: path
          description: 评论id
      responses:
        404:
          description: 未找到该运营文章,或未找到该评论
        200:
          description: OK,成功处理请求，并且更新了该运营文章的评论数，返回新创建的评论的id
      security:
      - token: []

  /courses/:
    get:
      tags:
      - course
      summary: 分页获取课程
      description: 分页获取所有课程，一次获取20门，通过url参数可以设置排序规则以及分类获取。<br><b>主标签:</b>gg_cat=1返回公共课； ts_cat=1返回通识课； zy_cat=1返回专业课； sz_cat=1返回素质课；<br><b>二级标签（仅限通识课，即ts_cat=1时）:</b> sub_cat=1返回通识核心课 sub_cat=2返回通识选修课 sub_cat缺省则为0，若此时ts_cat=1返回所有通识课<br>gg_cat/ts_cat/zy_cat/sz_cat均为零或者缺省返回所有课程 各参数的值以数据库中值为准。<br>sort描述排序规则， "view",按评论数降序;"like"，按点赞数降序;"score"，按情感得分降序。默认为"view"
      produces:
      - application/json
      parameters:
        - name: gg_cat
          in: path
        - name: ts_cat
          in: path
        - name: zy_cat
          in: path
        - name: sz_cat
          in: path
        - name: sub_cat
          in: path
        - name: page
          in: path
          description: 当前需要获取的页数，当不传此参数则默认获取第一页
        - name: per_page
          in: path
          description: 每页获取的条数，当不传此参数默认获取20条
        - name: sort
          in: path
          description: 排序方案，若不传默认为“view”
      responses:
        200:
          description: OK
          headers:
            links:
              type: string
              description: 下一页和最后一页的请求地址
          schema:
            type: array
            items:
              $ref: '#/definitions/Course_resp'
    post:
      tags:
      - course
      summary: 创建课程
      description: 需要运营以上权限
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: body
          description: 请求体
          required: true
          schema:
            type: object
            $ref: '#/definitions/Course_req'
      responses:
        201:
          description: ok
      security:
      - token: []


  /courses/{id}/:
    get:
      tags:
      - course
      summary: 根据id获取某一课程信息
      description: 
      produces:
      - application/json
      parameters:   
        - name: id
          in: path
          required: true
          description: 课程id
      responses:
        404:
          description: 未找到课程
        200:
          description: OK
          headers:
            links:
              type: string
              description: 下一页和最后一页的请求地址
          schema:
            type: array
            items:
              $ref: '#/definitions/Course_resp'
    put:
      tags:
      - course
      summary: 更新某一课程的信息
      description: 需要运营以上权限，在请求体中提供需要更改的字段和更改后的值
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: 课程id
        - in: body
          description: 请求体
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              teacher:
                type: string
              category_id:
                type: integer
              sub_category_id:
                type: integer
              type_id:
                type: integer
              available:
                type: boolean
      responses:
        404:
          description: 未找到该课程
        200:
          description: ok
      security:
      - token: []

    delete:
      tags:
      - course
      summary: 删除某一课程的信息
      description: 需要管理员权限，删除该课程及其在redis中的缓存
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: 课程id
      responses:
        404:
          description: 未找到该课程
        200:
          description: ok
      security:
      - token: []
  
  /tags/{id}/courses/:
    get:
      tags:
      - course
      summary: 分页获取拥有某一tag的所有course
      description: 
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: tag id
        - name: page
          in: query
          required: false
          description: 当前获取的页数,若不传则默认获取第一页
      responses:
        404:
          description: tag不存在
        200:
          description: OK
          headers:
            links:
              type: string
              description: 下一页和最后一页的请求地址
          schema:
            type: array
            items:
              $ref: '#/definitions/Course_resp'

  /courses/{id}/like/:
    post:
      tags:
      - like
      summary: 向特定id的课程点赞
      description: 需登录
      produces:
      - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: 课程id
      responses:
        404:
          description: 未找到该课程
        403:
          description: 已经点赞过该课程
        201:
          description: 点赞成功
      security:
      - token: []

    delete:
      tags:
      - like  
      summary: 给特定课程取消点赞
      description: 需登录
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        description: 课程id
      responses:
        200:
          description: OK
        403:
          description: 还未给该课程点赞
      security:
      - token: []
      
  /comments/{id}/like/:
    post:
      tags:
      - like
      summary: 给特定id的评论点赞
      description: 需登录
      produces:
      - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: 评论id
      responses:
        404:
          description: 未找到该评论
        403:
          description: 已经点赞过该评论
        201:
          description: 点赞成功
      security:
      - token: []

    delete:
      tags:
      - like  
      summary: 给特定评论取消点赞
      description: 需登录
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        description: 评论id
      responses:
        200:
          description: OK
        403:
          description: 还未给该评论点赞
        404:
          description: 未找到该评论
      security:
      - token: []
  /tip/{id}/like/:
    post:
      tags:
      - like
      summary: 给特定id的运营文章(选课贴士)点赞
      description: 需登录
      produces:
      - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: 运营文章id
      responses:
        404:
          description: 未找到该运营文章
        403:
          description: 已经点赞过该贴士
        201:
          description: 点赞成功
      security:
      - token: []

    delete:
      tags:
      - like  
      summary: 给特定运营文章取消点赞
      description: 需登录
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        required: true
        description: 运营文章id
      responses:
        200:
          description: OK
        403:
          description: 还未给该运营文章点赞
        404:
          description: 未找到该运营文章
      security:
      - token: []
  /memcached/:
    post:
      tags:
      - memcached
      summary: 将录入的课程信息全部读入缓存
      description: 管理员操作
      # produces:
      # - application/json
      # parameters:
      # - name: id
      #   in: path
      #   required: true
      #   description: 运营文章id
      responses: 
        200:
          description: OK
      security:
      - token: []
  /memcached/{id}/:
    post:
      tags:
      - memcached
      summary: 更新特定课程的缓存
      description: 管理员操作
      parameters:
      - name: id
        in: path
        required: true
        description: 课程id 
      responses: 
        200:
          description: OK
        404:
          description: 未找到该课程
      security:
      - token: []
    delete:
      tags:
      - memcached
      summary: 删除特定课程的缓存
      description: 管理员操作 
      parameters:
      - name: id
        in: path
        required: true
        description: 课程id 
      responses: 
        200:
          description: OK
        404:
          description: 未找到该课程
      security:
      - token: []

  /refresh_memcache/:
    get:
      tags: 
      - memcached
      description: 更新代码中所用的缓存(耗时约10s) 管理员操作
      responses:
        200:
          description: OK
      security:
      - token: []
      
  /course/{id}/question/:
    post:
      tags:
      - question
      summary: 向某一课程提问
      description: 需登录 
      parameters:
      - name: id
        in: path
        required: true
        description: 课程id 
      - in: body
        required: true
        description: 请求体中放置问题信息的json
        schema:
          type: object
          properties:
            question_content:
              type: string
              description: 问题内容
      responses:
        201: 
          description: OK
        404:
          description: 未找到该课程
      security:
        - token: []
  
  /question/{id}/:
    delete:
      tags:
      - question
      summary: 删除某一提问
      description: 管理员操作
      parameters:
      - name: id
        in: path
        required: true
        description: 问题id 
      responses:
        201: 
          description: OK
        404:
          description: 未找到该提问
      security:
        - token: []
      
  /question/{id}/answer/:
    post:
      tags:
      - answer
      summary: 回答某一个问题
      description: 需登录
      parameters:
      - name: id
        in: path
        required: true
        description: 问题id 
      - in: body
        required: true
        description: 请求体中放置回答信息的json
        schema:
          type: object
          properties:
            answer_content:
              type: string
              description: 回答内容
      responses:
        201: 
          description: OK
        404:
          description: 未找到该提问
      security:
        - token: []

  /answer/{id}/:
    delete:
      tags:
      - answer
      summary: 删除某一回答
      description: 管理员操作
      parameters:
      - name: id
        in: path
        required: true
        description: 回答id 
      responses:
        201: 
          description: OK
        404:
          description: 未找到该回答
      security:
        - token: []

  /course/{id}/questions/:
    get:
      tags:
      - question
      summary: 获取某一课程的所有提问
      description: 按照发表顺序排序，最新的排在前面
      parameters:
      - name: id
        in: path
        required: true
        description: 课程id 
      responses:
        200: 
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        404:
          description: 未找到该课程

  /question/{id}/answers/:
    get:
      tags:
      - answer
      summary: 获取某一问题的所有回答
      description: 按照发表顺序排序，最新的排在前面
      parameters:
      - name: id
        in: path
        required: true
        description: 问题id 
      responses:
        200: 
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
        404:
          description: 未找到该问题

  /questions/:
    get:
      tags:
      - question
      summary: 分页获取所有问题
      description: 运营以上权限操作，按照发布的时间排序，新问题排在前面，默认每页10条
      produces:
      - application/json
      parameters:
        - name: page
          required: true
          in: path
          description: 需要获取的页面，如果获取第一页则可以不用传该参数
      responses:
        200:
          description: OK
          headers:
            links:
              type: string
              description: 下一页和最后一页的请求地址
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
      security:
        - token: []

  /answers/:
    get:
      tags:
      - answer
      summary: 分页获取所有回答
      description: 运营以上权限操作，按照评论发布的时间排序，新回答排在前面，默认每页10条
      produces:
      - application/json
      parameters:
        - name: page
          required: true
          in: path
          description: 需要获取的页面，如果获取第一页则可以不用传该参数
      responses:
        200:
          description: OK
          headers:
            links:
              type: string
              description: 下一页和最后一页的请求地址
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
      security:
        - token: []
  
  /tips/:
    get:
      tags:
      - tip
      summary: 分页获取所有运营文章
      description: 每页5条，按时间倒序排列
      produces:
      - application/json
      parameters:
        - name: page
          required: true
          in: path
          description: 需要获取的页面，如果获取第一页则可以不用传该参数
      responses:
        200:
          description: OK
          headers:
            links:
              type: string
              description: 下一页和最后一页的请求地址
          schema:
            type: array
            items:
              $ref: '#/definitions/Tip'
    post:
      tags:
      - tip
      summary: 发布一篇新的运营文章
      description: 运营以上权限
      consumes:
       - application/json
      produces:
      - application/json
      parameters:
        - in: body
          required: true
          description: 包含tip信息的json对象
          schema:
            type: object
            properties:
              title:
                type: string
              body:
                type: string
              img_url:
                type: string
              author:
                type: string
              banner_url:
                type: string
      responses:
        201:
          description: OK
      security:
        - token: []

  /tips/{id}/:
    get:
      tags:
      - tip
      summary: 获取某一运营文章
      description: 同时更新浏览量的计数器
      produces:
      - application/json
      parameters:
        - name: id
          required: true
          in: path
          description: tip id
      responses:
        404:
          description: 找不到对应的tip
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Tip'

    put:
      tags:
      - tip
      summary: 更新某一运营文章
      description: 运营以上权限操作
      consumes:
      - application/json
      parameters:
        - in: body
          required: true
          description: 包含tip更新信息的json对象
          schema:
            type: object
            properties:
              title:
                type: string
              body:
                type: string
              img_url:
                type: string
              author:
                type: string
              banner_url:
                type: string
      responses:
        404:
          description: 找不到该tip
        200:
          description: OK
      security:
        - token: []
    delete:
      tags:
      - tip
      summary: 删除某一运营文章
      description: 管理员操作
      # consumes:
      # - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: 需删除的运营文章id
      responses:
        404:
          description: 找不到该tip
        200:
          description: OK
      security:
        - token: []
  /tags/:
    get:
      tags:
      - tag
      summary: 获取所有tag信息
      description:
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: page
          required: true
          in: path
          description: 需要获取的页面，如果获取第一页则可以不用传该参数
      responses:
        200:
          description: OK
          headers:
            links:
              type: string
              description: 下一页和最后一页的请求地址
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
  /tags/{id}/:
    get:
      tags:
      - tag
      summary: 获取特定id的标签
      description:
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: id
          required: true
          in: path
          description: 所需获取的tag的id
      responses:
        404:
          description: 找不到该tag
        200:
          schema:
            type: object
            $ref: '#/definitions/Tag'
    delete:
      tags:
      - tag
      summary: 删除特定id的标签
      description: 管理员操作
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: id
          required: true
          in: path
          description: 所需删除的tag的id
      responses:
        404:
          description: 找不到该tag
        200:
          description: OK
      security:
        - token: []
  /courses/{id}/tags/:
    get:
      tags:
      - tag
      summary: 获取某一课程的所有标签
      description:
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: id
          required: true
          in: path
          description: 课程id
      responses:
        404:
          description: 找不到该课程
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
  /users/:
    get:
      tags:
      - user
      summary: 分页获取所有用户信息
      description:
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: page
          required: true
          in: query
          description: 需要获取的页面，如果获取第一页则可以不用传该参数
        - name: roleid
          required: false
          in: query
          type: integer
          description: 需要获取的用户的角色，若不传该参数，则获取所有用户
      responses:
        200:
          description: OK
          headers:
            links:
              type: string
              description: 下一页和最后一页的请求地址
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      tags:
      - user
      summary: 创建一个用户
      description: 管理员操作
      consumes:
       - application/json
      produces:
      - application/json
      parameters:
        - in: body
          required: true
          description: 包含用户信息的json对象
          schema:
            properties:
              username:
                type: string
                description: 用户名
              password:
                type: string
                description: 密码
              roleid:
                type: integer
                description: 角色id
              email:
                type: string
                description: 邮箱
              qq:
                type: string
                description: QQ
              major: 
                type: string
                description: 专业
              phone:
                type: string
                description: 联系方式
              school:
                type: string
                description: 院系
              recommander_id:
                type: integer
                description: 推荐人id,可选
      responses:
        201:
          description: OK
          headers:
            location:
              type: string
              description: 获取该用户信息的请求地址
      security:
        - token: []
  /users/{id}/:
    get:
      tags:
      - user
      summary: 获取某个用户信息
      description:
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: id
          required: true
          in: path
          description: 用户id
      responses:
        404: 找不到该用户
        200:
          description: OK
          schema:
            type: object
            $ref: '#/definitions/User2'
    
    put:
      tags:
      - user
      summary: 更新某一用户的信息
      description: 需要管理员权限，在请求体中提供需要更改的字段和更改后的值
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: 用户id
        - in: body
          description: 请求体
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
              qq:
                type: string
              phone:
                type: string
              major:
                type: string
              role_id:
                type: integer
      responses:
        404:
          description: 未找到该用户
        200:
          description: ok
      security:
      - token: []

    delete:
      tags:
      - user
      summary: 删除某一用户的信息
      description: 需要管理员权限
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: 用户id
      responses:
        404:
          description: 未找到该用户
        200:
          description: ok
      security:
      - token: []
      
  /courses/{id}/users/:
    get:
      tags:
      - user
      summary: 获取给特定id课程点赞的所有用户
      description:
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: 用户id
      responses:
        404:
          description: 未找到该用户
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

  /comments/{id}/users/:
    get:
      tags:
      - user
      summary: 获取给特定id评论点赞的所有用户
      description:  
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: 评论id
      responses:
        404:
          description: 未找到该评论
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /user/mine/:
    get:
      tags:
      - user
      summary: 根据token获取用户信息
      description: 需登录
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        404:
          description: 未找到该用户
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User2'
      security:
      - token: []
  /search/:
    get:
      tags:
      - search
      summary: 根据关键字返回搜索结果集
      description:  分页获取
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - name: keywords
          in: query
          required: true
          description: 关键字
        - name: page
          in: query
          required: false
          description: 当前获取的页数，若不传该参数，则默认返回第一页
        - name: per_page
          in: query
          required: false
          description: 每页获取的条数，若不传该参数，则默认每页20条
        - name: main_cat
          in: query
          required: false
          description: 主分类id
        - name: ts_cat
          in: query
          required: false
          description: 二级分类id
      responses:
        200:
          description: OK
          headers:
            link:
              type: string
              description: 下一页和最后一页的地址
  /search/hot/:
    get:
      tags:
      - search
      summary: 返回最热的10个搜索词
      description:  
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: OK
  /register/:
    post:
      tags:
      - other
      summary: 注册一个用户
      description: 
      consumes:
       - application/json
      produces:
      - application/json
      parameters:
        - in: body
          required: true
          description: 包含用户信息的json对象
          schema:
            properties:
              username:
                type: string
                description: 用户名
              password:
                type: string
                description: 密码
              roleid:
                type: integer
                description: 角色id
              email:
                type: string
                description: 邮箱
              qq:
                type: string
                description: QQ
              major: 
                type: string
                description: 专业
              phone:
                type: string
                description: 联系方式
              school:
                type: string
                description: 院系
              recommender_id:
                type: integer
                description: 推荐人id
      responses:
        201:
          description: OK
          headers:
            location:
              type: string
              description: 获取该用户信息的请求地址

  /statistics/:
    get:
      tags:
      - other
      summary: 显示全站部分集合状态
      description: 运营以上权限操作
      consumes:
       - application/json
      produces:
      - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              comment_count:
                type: integer
                description: 全站评论总数
              users_count:
                type: integer
                description: 全站用户总数
              courses_count:
                type: integer
                description: 全站课程总数
      security:
      - token: []
    
  /statistics/user/<uid>/:
    get:
      tags:
      - other
      summary: 获取从某个id之后新增的用户人数。 管理员操作
      parameters:
        - in: path
          name: uid
          required: true
          type: integer
      responses:
        200:
          description: 返回{"user_added":integer} JSON
        403:
          description: 权限不足
    
  /statistics/comment/<date>/:
    get:
      tags:
      - other
      summary: 获取某个日期后的新增评论数。 管理员操作
      description: data格式 YYYY-MM-DD如 2018-01-01
      parameters:
      - in: path
        name: data
        required: true
        type: string
      responses:
        200:
          description: 返回{"comment_added":integer} JSON
        403:
          description: 权限不足
          
  /sure/:
    post:
      tags:
      - other
      summary: 根据邮箱确定用户是否存在
      description: 
      consumes:
       - application/json
      produces:
      - application/json
      parameters:
        - in: body
          required: true
          # description: 包含用户信息的json对象
          schema:
            properties:
              email:
                type: string
                description: 邮箱
      responses:
        200:
          description: 返回一个包含提示信息的字典

  /promotion/private-promotion-link/:
    get:
      tags:
      - promotion
      summary: 登录用户获取专属推广连接
      description: 获取的链接为短链接，该短链接会被重定向到:https://xueer.muxixyz.com/promotion/register/?id=<用户ID>,此链接中包含的id参数为用户标识符。前端需要自行实现该URL对应的handler,获取该连接中的id参数，即获取此次请求的推荐人id，然后注册该用户，在注册的请求体中加上recommender_id即可
      produces:
      - application/json
      responses:
        200:
          description: 返回推广短链接
      security:
      - token: []

  /promotion/top/:
    get:
      tags:
      - promotion
      summary: 获取推荐成功过的老用户信息，按照推荐成功注册的人数从大到小排行
      description: 
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      security:
      - token: []

###########################PATH END###################################



###########################DEF START#################################

definitions:
  Comment:
    type: object
    properties:
      body:
        type: string
        description: 评论体
      liked:
        type: boolean
        description: 当前用户是否给这条评论点赞,已经赞了为true,否则为false;若匿名用户，则为false
      avatar:
        type: string
        description: 评论用户的头像url
      date:
        type: string
        description: 评论日期
      is_useful:
        type: integer
        description: 我也不知道这个字段是干什么的
      user_name:
        type: string
        description: 评论作者姓名
      id:
        type: integer
        description: 评论id
      likes:
        type: integer
        description: 这条评论获得的点赞数
      like_url:
        type: string
        description: 给该评论点赞的需要请求的url
      usual_score:
        type: integer
        description: 平时分
      final_score:
        type: integer
        description: 期末分

  Course_resp:
    type: object
    properties:
      id:
        type: integer
        description: 课程id
      title:
        type: string
        description: 课程名
      teacher:
        type: string
        description: 老师名
      comment_id:
        type: string
        description: 评论的id
      hot_tags:
        type: string
        description: 热门标签
      available:
        type: boolean
        description: 该课程当前是否可用
      score:
        type: integer
        description: 情感得分
      loctime:
        type: string
        description: 上课时间地点
      likes:
        type: integer
        description: 点赞总数
      like_url:
        type: string
        description: 给该课程点赞需要请求的url
      liked:
        type: boolean
        description: 当前用户是否给该课程点赞，匿名用户默认为false
      main_category:
        type: string
        description: 当前课程的主分类名
      sub_category:
        type: string
        description: 子分类名
      credit_category:
        type: string
        description: 学分类别
      views:
        type: integer
        description: 评论数
      average_final_score:
        type: integer
        description: 平均期末分数
      average_usual_score: 
        type: integer
        description: 平均平时分


  Course_req:
    type: object
    properties:
      name:
        type: string
        description: 课程名
      teacher:
        type: string
        description: 老师姓名
      introduction:
        type: string
        description: 课程简介
      category_id:
        type: integer
        description: 课程主分类
      credit:
        type: integer
        description: 学分
      type_id:
        type: integer
        description: 学分类别分类id
      sub_category_id:
        type: integer
        description: 二级课程分类


  Question:
    type: object
    properties:
      id:
        type: integer
        description: 提问id
      question_content:
        type: string
        description: 提问内容
      create_time:
        type: string
        description: 提问时间
      author_id:
        type: integer
        description: 提问者id
      course_id:
        type: integer
        description: 所属的课程的id


  Answer:
    type: object
    properties:
      id:
        type: integer
        description: 回答id
      answer_content:
        type: string
        description: 回答内容
      create_time:
        type: string
        description: 回答时间
      author_id:
        type: integer
        description: 回答者id
      question_id:
        type: integer
        description: 所属的问题的id


  Tip:
    type: object
    properties:
      id:
        type: integer
        description: tip id
      title:
        type: string
        description: 标题
      body:
        type: string
        description: 运营文章内容
      url:
        type: string
        description: 获取该tip信息的url
      views:
        type: integer
        description: 浏览量
      likes:
        type: integer
        description: 点赞数
      date:
        type: string
        description: 发布日期
      img_url: 
        type: string
        description: 插图地址
      banner_url:
        type: string
        description: banner地址
      liked:
        type: integer
        description: 当前用户是否点赞，匿名用户返回false

  Tag:
    type: object
    properties:
      id:
        type: integer
        description: tag id
      tag_url:
        type: string
        description: 获取该tag信息的url
      title:
        type: string
        description: tag名
     
  User:
    type: object
    properties:
      id:
        type: integer
        description: 用户id
      url:
        type: string
        description: 获取该用户信息需要访问的url
      username:
        type: string
        description: 用户名
      email:
        type: string
        description: 邮箱
      qq:
        type: string
        description: QQ
      major: 
        type: string
        description: 专业
      phone:
        type: string
        description: 联系方式
      school:
        type: string
        description: 院系
      valid_recommend_count:
        type: integer
        description: 该用户成功推荐的人数
  
  User2:
    type: object
    properties:
      id:
        type: integer
        description: 用户id
      username:
        type: string
        description: 用户名
      email:
        type: string
        description: 邮箱
      valid_recommend_count:
        type: integer
        description: 该用户成功推荐的人数

  # Role:
  #   type: object
  #   properties:
  #     id:
  #       type: integer
  #       format: int32
  #       description: Role的自增主键.
  #     name:
  #       type: string
  #       description: 角色名，要求在表中唯一.
  #     default:
  #       type: boolean
  #       description: 是否是注册用户默认角色，默认为False
  #     permissions:
  #       type: integer
  #       description: 当前角色拥有的权限.
  #     users:
  #       type: array
  #       description: 与User表相关联的虚拟属性，可以拿到属于当前角色的User对象.
  #       items:
  #         $ref: '#/definitions/User'
  # User:
  #   type: object
  #   properties:
  #     id:
  #       type: integer
  #       description: 用户表自增主键
  #     username:
  #       type: string
  #       description: 用户名,唯一，有索引
  #     email:
  #       type: string
  #       description: 邮箱，唯一，索引
  #     qq:
  #       type: string
  #       description: 用户QQ,有索引.
  #     major:
  #       type: string
  #       description: 专业.
  #     password_hash:
  #       type: string
  #       description: 密码的哈希值.
  #     phone:
  #       type: string
  #       description: 电话，默认为None
  #     school:
  #       type: string
  #       description: 学院，默认为空，有索引
  #     avatar:
  #       type: string
  #       description: 头像URL
  #     role_id:
  #       type: integer
  #       description: 指向Role的外键
  #     confirmed:
  #       type: boolean
  #       description: 该用户是否通过验证的标志位
  #     comments:
  #       type: array
  #       description: 与Comments表相关联的虚拟属性，可以拿到当前用户发表的评论的Comments对象的查询对象
  #       items:
  #         $ref: '#/definitions/Comments'
  #     questions:
  #       type: array
  #       description: 与CourseQuestion表相关联的虚拟属性，可以拿到当前用户发表课程提问的CourseQuestion对象的查询对象
  #       items:
  #         $ref: '#/definitions/CourseQuestion'
  #     answers:
  #       type: array
  #       description: 与Answer表相关联的虚拟属性，可以拿到当前用户发表的回答的Answer对象的查询对象
  #       items:
  #         $ref: '#/definitions/Answer'
  # Courses:
  #   type: object
  #   properties:
  #     id:
  #       type: integer
  #       description: 主键.
  #     name:
  #       type: string
  #       description: 课程名
  #     category_id:
  #       type: integer
  #       description: 指向CourseCategory的外键, 课程主分类
  #     subcategory_id:
  #       type: integer
  #       description: 指向CoursesSubCategories的外键, 课程二级分类
  #     type_id:
  #       type: integer
  #       description: 指向CourseType的外键, 学分类别.
  #     credit:
  #       type: integer
  #       description: 该课程对应的学分
  #     available:
  #       type: boolean
  #       description: 课程是否可用
  #     loctime:
  #       type: string
  #       description: 上课地点和时间
  #     teacher:
  #       type: string
  #       description: 老师姓名
  #     count:
  #       type: integer
  #       description: 课程对应的评论数
  #     score:
  #       type: integer
  #       description: 情感分析得分
  #     introduction:
  #       type: string
  #       description: 课程介绍
  #     likes:
  #       type: integer
  #       description: 课程对应的点赞数,默认为０
  #     liked:
  #       type: boolean
  #       description: 属性方法，当前用户是否点赞了这门课
  #     hot_tags:
  #       type: string
  #       description: 返回热门的4个标签，用空格隔开
  #     comment:
  #       type: array
  #       description:  与Comments表相关联的虚拟属性，可以拿到当前课程的Comments对象的查询.
  #       items:
  #         $ref: '#/definitions/Comments'
  #     tags:
  #       type: array
  #       description: 与CourseTag表相关联的虚拟属性，可以拿到当前课程的CourseTag对象的查询.
  #       items:
  #         $ref: '#/definitions/CourseTag'
  #     users:
  #       type: array
  #       description: 课程与用户点赞的多对多关系, cascade级联删除
  #       items:
  #         $ref: '#/definitions/User'
  #     questions:
  #       type: array
  #       description: 课程与提问的多对多关系, cascade级联删除
  #       items:
  #         $ref: '#/definitions/CourseQuestion'
  # CourseCategories:
  #   type: object
  #   properties:
  #     id:
  #       type: integer
  #       description: 课程主分类主键
  #     name:
  #       type: string
  #       description: 课程主分类的名称
  #     courses:
  #       type: array
  #       description: 与Courses表相关联的虚拟属性，可以拿到当前课程主分类的Courses对象的查询对象
  #       items:
  #         $ref: '#/definitions/Courses'
  #     subcategories:
  #       type: array
  #       description: 该主分类下面对应的课程子分类
  #       items:
  #         $ref: "#/definitions/CoursesSubCategories"
  # CoursesSubCategories:
  #   type: object
  #   properties:
  #     id:
  #       type: integer
  #       description: 课程子分类主键
  #     name:
  #       type: string
  #       description: 课程子分类名称
  #     courses:
  #       type: array
  #       description: 该课程子分类下面对应的课程
  #       items:
  #         $ref: "#/definitions/Courses"
  # CourseTypes:
  #   type: object
  #   properties:
  #     id:
  #      type: integer
  #      description: 课程类型主键
  #     name:
  #       type: string
  #       description: 课程类型名称
  #     courses:
  #       type: array
  #       description: 该课程类型下面对应的课程
  #       items:
  #         $ref: "#/definitions/Courses"

  # Comments:
  #   type: object
  #   properties:
  #     id:
  #       type: integer
  #       description: 评论主键
  #     course_id:
  #       type: integer
  #       description: 指向Courses.id的外键,与课程的多对一关系
  #     user_id:
  #       type: integer
  #       description: 指向User.id的外键，与用户的多对一关系
  #     timestamp:
  #       type: string
  #       description: 时间戳, 默认是系统时间(datetime.utcnow)
  #     body:
  #       type: string
  #       description: 评论内容
  #     likes:
  #       type: integer
  #       description: 评论获得的点赞数，默认为０
  #     is_userful:
  #       type: integer
  #       description: ??????
  #     tip_id:
  #       type: integer
  #       description: 指向tip的外键, 与tip的多对一关系
  #     time:
  #       type: string
  #       description: 属性方法，将timestamp转成字符串表示的时间
  #     liked:
  #       type: boolean
  #       description: 当前用户是否给当前评论点赞，匿名用户默认为false,即未点赞
  #     user:
  #       type: array
  #       # deascription: 与用户点赞的多对多关系
  #       items:
  #         $ref: "#/definitions/User"
  # Teacher:
  #   type: object
  #   description: 老师类，目前未使用该类
  #   properties:
  #     id:
  #       type: integer
  #       description: 主键
  #     name:
  #       type: string
  #       description: 老师姓名
  #     department:
  #       type: string
  #       description: 所在院系
  #     introduction:
  #       type: string
  #       description: 老师简介
  #     phone:
  #       type: string
  #       description: 老师联系方式
  #     weibo:
  #       type: string
  #       description: 老师微博主页地址
  # Tags:
  #   type: object
  #   properties:
  #     id:
  #       type: integer
  #       description: 主键
  #     name:
  #       type: string
  #       description: Tag名称
  #     count:
  #       type: integer
  #       description: 标签计数, 用于全站热门标签统计,默认为０
  #     courses:
  #       type: array
  #       # deascription: 标签和课程的多对多关系
  #       items:
  #         $ref: "#/definitions/CourseTag"
  # Tips:
  #   type: object
  #   properties:
  #     id:
  #       type: integer
  #       description: 运营文章表主键
  #     title:
  #       type: string
  #       description: 运营文章标题
  #     body:
  #       type: string
  #       description: 文章主题(含HTML)
  #     img_url:
  #       type: string
  #       description: 文章对应的图片
  #     banner_url:
  #       type: string
  #       description: 桌面版banner
  #     author:
  #       type: string
  #       description: 作者名称
  #     timestamp:
  #       type: string
  #       format: date-time
  #       description: 时间戳, 默认是系统时间
  #     likes:
  #       type: integer
  #       description: 文章对应的点赞数
  #     views:
  #       type: integer
  #       description: 文章的浏览量
  #     time:
  #       type: string
  #       description: 将上面的timestamp格式化为字符串
  #     liked:
  #       type: boolean
  #       description: 当前用户是否给该文章点赞，匿名用户为false,即未点赞
  #     users:
  #       type: array
  #       description: 文章和用户点赞的多对多关系
  #       items:
  #         $ref: "#/definitions/User"
  # CourseQuestion:
  #   type: object
  #   properties:
  #     id:
  #       type: integer
  #       description: 主键
  #     question_content:
  #       type : string
  #       description: 问题的内容
  #     create_time:
  #       type: string
  #       format: date-time
  #       description: 提问时间
  #     author_id:
  #       type: integer
  #       description: 指向User.id的外键
  #     course_id:
  #       type: integer
  #       description: 指向Course.id的外键
  #     answers:
  #       type: array
  #       description: 该提问对应的回答的Answer对象
  #       items:
  #         $ref: "#/definitions/Answer"
  # Answer:
  #   type: object
  #   properties:
  #     id:
  #       type: integer
  #       description: 主键
  #     answer_content:
  #       type : string
  #       description: 回答的内容
  #     create_time:
  #       type: string
  #       format: date-time
  #       description: 回答时间
  #     author_id:
  #       type: integer
  #       description: 指向User.id的外键
  #     question_id:
  #       type: integer
  #       description: 指向CourseQuestion.id的外键

  # CourseTag:
  #   type: object
  #   properties:
  #     conrse_id:
  #       type: integer
  #       description: 课程的id,与下面的tag_id构成联合主键
  #     tag_id:
  #       type : integer
  #       description: 标签id,与上面的course_id构成联合主键
  #     count:
  #       type: integer
  #       description: 纪录(课程, 标签)的引用次数, 作为热门标签的统计
  #       default: 0


##########################DEF END#######################################

# definitions:
#   Order:
#     type: object
#     properties:
#       id:
#         type: integer
#         format: int64
#       petId:
#         type: integer
#         format: int64
#       quantity:
#         type: integer
#         format: int32
#       shipDate:
#         type: string
#         format: date-time
#       status:
#         type: string
#         description: Order Status
#         enum:
#         - placed
#         - approved
#         - delivered
#       complete:
#         type: boolean
#         default: false
#     xml:
#       name: Order
#   Category:
#     type: object
#     properties:
#       id:
#         type: integer
#         format: int64
#       name:
#         type: string
#     xml:
#       name: Category
#   User:
#     type: object
#     properties:
#       id:
#         type: integer
#         format: int64
#       username:
#         type: string
#       firstName:
#         type: string
#       lastName:
#         type: string
#       email:
#         type: string
#       password:
#         type: string
#       phone:
#         type: string
#       userStatus:
#         type: integer
#         format: int32
#         description: User Status
#     xml:
#       name: User
#   Tag:
#     type: object
#     properties:
#       id:
#         type: integer
#         format: int64
#       name:
#         type: string
#     xml:
#       name: Tag
#   Pet:
#     type: object
#     required:
#     - name
#     - photoUrls
#     properties:
#       id:
#         type: integer
#         format: int64
#       category:
#         $ref: '#/definitions/Category'
#       name:
#         type: string
#         example: doggie
#       photoUrls:
#         type: array
#         xml:
#           name: photoUrl
#           wrapped: true
#         items:
#           type: string
#       tags:
#         type: array
#         xml:
#           name: tag
#           wrapped: true
#         items:
#           $ref: '#/definitions/Tag'
#       status:
#         type: string
#         description: pet status in the store
#         enum:
#         - available
#         - pending
#         - sold
#     xml:
#       name: Pet
#   ApiResponse:
#     type: object
#     properties:
#       code:
#         type: integer
#         format: int32
#       type:
#         type: string
#       message:
#         type: string
# externalDocs:
#   description: Find out more about Swagger
#   url: http://swagger.io
# # Added by API Auto Mocking Plugin
